import im from "immutable";
import { ShapeType } from "../shapes/Shapes";
import Graph from "../utils/Graph";
import * as ad from "./ad";
import { A, C, Identifier } from "./ast";
import { StyleDiagnostics, StyleError } from "./errors";
import { Fn } from "./state";
import { BindingForm, Expr, GPIDecl, Header, StyT } from "./style";
import { ArgVal, Field, Name, PropID } from "./value";
export type ProgType = SubProgT | StyProgT;
export interface SubProgT {
    tag: "SubProgT";
}
export interface StyProgT {
    tag: "StyProgT";
}
export interface SelEnv {
    sTypeVarMap: {
        [k: string]: StyT<A>;
    };
    varProgTypeMap: {
        [k: string]: [ProgType, BindingForm<A>];
    };
    skipBlock: boolean;
    header: Header<A> | undefined;
    warnings: StyleError[];
    errors: StyleError[];
}
export type Subst = {
    [k: string]: string;
};
export type LocalVarSubst = LocalVarId | NamespaceId;
export interface LocalVarId {
    tag: "LocalVarId";
    contents: [number, number];
}
export interface NamespaceId {
    tag: "NamespaceId";
    contents: string;
}
export type StyleName = Name;
export type SubstanceName = Name;
export interface WithContext<T> {
    context: Context;
    expr: T;
}
export type NotShape = Exclude<Expr<C>, GPIDecl<C>>;
export interface ShapeSource {
    tag: "ShapeSource";
    shapeType: ShapeType;
    props: im.Map<PropID, WithContext<NotShape>>;
}
export interface OtherSource {
    tag: "OtherSource";
    expr: WithContext<NotShape>;
}
export type FieldSource = ShapeSource | OtherSource;
export type Fielded = im.Map<Field, FieldSource>;
export interface Assignment {
    diagnostics: StyleDiagnostics;
    globals: im.Map<StyleName, Fielded>;
    unnamed: im.Map<im.List<number>, Fielded>;
    substances: im.Map<SubstanceName, Fielded>;
}
export interface Locals {
    locals: im.Map<StyleName, FieldSource>;
}
export interface BlockAssignment extends Assignment, Locals {
}
export interface BlockInfo {
    block: LocalVarSubst;
    subst: Subst;
}
export interface Context extends BlockInfo, Locals {
}
export interface ResolvedName {
    tag: "Global" | "Local" | "Substance";
    block: LocalVarSubst;
    name: string;
}
export type ResolvedPath<T> = T & ResolvedName & {
    members: Identifier<T>[];
};
export type DepGraph = Graph<string, ShapeType | WithContext<NotShape> | undefined>;
export interface Layer {
    below: string;
    above: string;
}
export interface Translation {
    diagnostics: StyleDiagnostics;
    symbols: im.Map<string, ArgVal<ad.Num>>;
    objectives: im.List<Fn>;
    constraints: im.List<Fn>;
    layering: im.List<Layer>;
}
//# sourceMappingURL=styleSemantics.d.ts.map