export interface SourceLoc {
    line: number;
    col: number;
}
export interface SourceRange {
    start: SourceLoc;
    end: SourceLoc;
}
export type ASTNode<T> = T & {
    tag: string;
    nodeType: NodeType;
};
export type A = unknown;
export type AbstractNode = ASTNode<A>;
export type NodeType = "Substance" | "Style" | "Domain" | "SyntheticSubstance" | "SyntheticStyle";
export type SyntheticNode = AbstractNode & {
    nodeType: "SyntheticSubstance" | "SyntheticStyle";
};
export type C = SourceRange;
export type ConcreteNode = ASTNode<C>;
export declare const metaProps: string[];
export type Identifier<T> = ASTNode<T> & {
    tag: "Identifier";
    type: string;
    value: string;
};
export type StringLit<T> = ASTNode<T> & {
    tag: "StringLit";
    contents: string;
};
//# sourceMappingURL=ast.d.ts.map