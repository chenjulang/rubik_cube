/**
 * Provides an assortment of utility functions shared across shapes that computes
 * output SVG properties using the optimized shape properties as input.
 */
import { Shape } from "../types/shape";
/**
 * Auto-map to SVG any input properties for which we lack specific logic.
 *
 * Apply a map, AttrMapSvg, to perform any target-specific property name translation,
 * i.e., map from Penrose camel case formal to SVG mixed-case/kebab format.  Property names
 * not found in the map are mapped straight across.
 *
 * Note: Right now we are neither validating the SVG property names nor its contents.  The
 * thinking is to add an optional validator to the end of the pipeline at some point rather
 * than implement validation for all passthrough SVG properties inside Penrose.
 *
 * Note: This is an "escape hatch" for "passthrough" SVG properties we don't currently support.
 *
 * Note: SVG property names are case sensitive.
 */
export declare const attrAutoFillSvg: ({ properties }: Shape, elem: SVGElement, attrAlreadyMapped: string[]) => void;
/**
 * Maps fillColor --> fill, fill-opacity
 */
export declare const attrFill: ({ properties }: Shape, elem: SVGElement) => string[];
/**
 * Maps center --> cx, cy
 */
export declare const attrCenter: ({ properties }: Shape, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps scale --> transform
 */
export declare const attrScale: ({ properties }: Shape, elem: SVGElement) => string[];
/**
 * Maps center, width, height --> transform
 */
export declare const attrTransformCoords: ({ properties }: Shape, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps center, width, height --> x, y
 */
export declare const attrXY: ({ properties }: Shape, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps center, width, height, rotation --> transform
 *
 * Rotates a GPI by n degrees about a center
 * Note: elem must be `transform`able
 * NOTE: must be called before transform translate coords (matrix rules)
 * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform
 */
export declare const attrRotation: ({ properties }: Shape, canvasSize: [number, number], elem: SVGElement) => string[];
/**
 * Maps width, height --> width, height
 */
export declare const attrWH: ({ properties }: Shape, elem: SVGElement | HTMLElement) => string[];
/**
 * Maps cornerRadius --> rx
 */
export declare const attrCornerRadius: ({ properties }: Shape, elem: SVGElement) => string[];
/**
 * Maps data --> d
 */
export declare const attrPathData: ({ properties }: Shape, elem: SVGElement) => string[];
/**
 * Maps string --> new TextNode
 */
export declare const attrString: ({ properties }: Shape, elem: SVGElement) => string[];
export declare const DASH_ARRAY = "7,5";
/**
 * Maps strokeColor --> stroke, stroke-opacity
 *      strokeWidth --> stroke-width
 *      strokeDasharray, strokeStyle --> stroke-dasharray
 *      strokeLinecap --> stroke-linecap
 */
export declare const attrStroke: ({ properties }: Shape, elem: SVGElement) => string[];
/**
 * Maps name --> new Title
 */
export declare const attrTitle: ({ properties }: Shape, elem: SVGElement) => string[];
/**
 * Maps fontFamily, fontSize, fontStretch, fontStyle, fontVariant, fontWeight, lineHeight -> font
 */
export declare const attrFont: (shape: Shape, elem: SVGElement) => string[];
/**
 * Maps points -> points
 */
export declare const attrPolyPoints: (shape: Shape, canvasSize: [number, number], elem: SVGElement) => string[];
//# sourceMappingURL=AttrHelper.d.ts.map