import { Shape } from "../types/shape";
import { LabelCache, State } from "../types/state";
/**
 * Resolves path references into static strings. Implemented by client
 * since filesystem contexts vary (eg browser vs headless).
 * If path fails to resolve, return undefined
 */
export type PathResolver = (path: string) => Promise<string | undefined>;
export interface ShapeProps {
    shape: Shape;
    labels: LabelCache;
    canvasSize: [number, number];
    pathResolver: PathResolver;
}
/**
 * Turns Shape GPI data into a corresponding SVG element
 */
export declare const RenderShape: ({ shape, labels, canvasSize, pathResolver, }: ShapeProps) => Promise<SVGElement>;
/**
 * Makes a shape draggable. Browser only.
 * @param onDrag callback when drag complete
 * @param parentSVG
 * @param canvasSizeCustom
 */
export declare const DraggableShape: (shapeProps: ShapeProps, onDrag: (id: string, dx: number, dy: number) => void, parentSVG: SVGSVGElement, canvasSizeCustom?: [number, number]) => Promise<SVGGElement>;
/**
 *
 * @param state
 * @param updateState Callback for drag-updated state
 * @param pathResolver Resolves paths to static strings
 * @returns
 */
export declare const RenderInteractive: (state: State, updateState: (newState: State) => void, pathResolver: PathResolver) => Promise<SVGSVGElement>;
/**
 * Renders a static SVG of the shapes and labels.
 * @param pathResolver Resolves paths to static strings
 */
export declare const RenderStatic: (state: State, pathResolver: PathResolver) => Promise<SVGSVGElement>;
//# sourceMappingURL=Renderer.d.ts.map