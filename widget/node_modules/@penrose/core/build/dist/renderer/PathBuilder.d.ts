import * as ad from "../types/ad";
import { PathDataV } from "../types/value";
/**
 * Class for building SVG paths
 */
export declare class PathBuilder {
    private path;
    constructor();
    private newCoord;
    private newValue;
    getPath: () => PathDataV<ad.Num>;
    /**
     * Moves SVG cursor to coordinate [x,y]
     */
    moveTo: ([x, y]: [ad.Num, ad.Num]) => this;
    /**
     * closes the SVG path by drawing a line between the last point and
     * the start point
     */
    closePath: () => this;
    /**
     * Draws a line to point [x,y]
     */
    lineTo: ([x, y]: [ad.Num, ad.Num]) => this;
    /**
     * Draws a quadratic bezier curve ending at [x,y] with one control point
     * at [cpx, cpy]
     */
    quadraticCurveTo: ([cpx, cpy]: [ad.Num, ad.Num], [x, y]: [ad.Num, ad.Num]) => this;
    /**
     * Draws a cubic bezier curve ending at [x, y] with first control pt at
     * [cpx1, cpy1] and the second control pt at [cpx2, cpy2]
     */
    bezierCurveTo: ([cpx1, cpy1]: [ad.Num, ad.Num], [cpx2, cpy2]: [ad.Num, ad.Num], [x, y]: [ad.Num, ad.Num]) => this;
    /**
     * Shortcut quadratic bezier curve command ending at [x,y]
     */
    quadraticCurveJoin: ([x, y]: [ad.Num, ad.Num]) => this;
    /**
     * Shortcut cubic bezier curve command ending at [x, y]. The second control
     * pt is inferred to be the reflection of the first control pt, [cpx, cpy].
     */
    cubicCurveJoin: ([cpx, cpy]: [ad.Num, ad.Num], [x, y]: [ad.Num, ad.Num]) => this;
    /**
     * Create an arc along ellipse with radius [rx, ry], ending at [x, y]
     * @param rotation: angle in degrees to rotate ellipse about its center
     * @param largeArc: 0 to draw shorter of 2 arcs, 1 to draw longer
     * @param arcSweep: 0 to rotate CCW, 1 to rotate CW
     */
    arcTo: ([rx, ry]: [ad.Num, ad.Num], [x, y]: [ad.Num, ad.Num], [rotation, majorArc, sweep]: ad.Num[]) => this;
}
//# sourceMappingURL=PathBuilder.d.ts.map