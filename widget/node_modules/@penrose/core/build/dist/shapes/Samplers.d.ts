import seedrandom from "seedrandom";
import * as ad from "../types/ad";
import { OptStages } from "../types/state";
import { ColorV, FloatV, VectorV } from "../types/value";
type Range = [number, number];
export interface Canvas {
    width: number;
    height: number;
    size: [number, number];
    xRange: Range;
    yRange: Range;
}
export declare const makeCanvas: (width: number, height: number) => Canvas;
export type Sampler = (rng: seedrandom.prng) => number;
export interface Pending {
    tag: "Pending";
    pending: number;
}
export interface Sampled {
    tag: "Sampled";
    sampler: Sampler;
}
export interface InputMeta {
    init: Pending | Sampled;
    stages: OptStages;
}
export type InputFactory = (meta: InputMeta) => ad.Input;
export interface Context {
    makeInput: InputFactory;
}
/**
 * Return a simple `Context` which starts with a `seedrandom` PRNG seeded with
 * `variation`, and for each `makeInput` invocation, sets `val` by calling the
 * using the given `sampler` or placeholder `pending` value, then increments a
 * counter for the `key` field.
 */
export declare const simpleContext: (variation: string) => Context;
export declare const uniform: (min: number, max: number) => Sampler;
export declare const sampleVector: ({ makeInput }: Context, canvas: Canvas) => VectorV<ad.Num>;
export declare const sampleWidth: ({ makeInput }: Context, canvas: Canvas) => FloatV<ad.Num>;
export declare const sampleHeight: ({ makeInput }: Context, canvas: Canvas) => FloatV<ad.Num>;
export declare const sampleStroke: ({ makeInput }: Context) => FloatV<ad.Num>;
export declare const sampleColor: ({ makeInput }: Context) => ColorV<ad.Num>;
export {};
//# sourceMappingURL=Samplers.d.ts.map