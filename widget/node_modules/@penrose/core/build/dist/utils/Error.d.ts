import { Result } from "true-myth";
import { A, AbstractNode, C, Identifier, SourceLoc } from "../types/ast";
import { Arg, Type, TypeConstructor } from "../types/domain";
import { ArgLengthMismatch, CyclicSubtypes, DeconstructNonconstructor, DomainError, DuplicateName, FatalError, InvalidColorLiteral, NaNError, ParseError, PenroseError, RuntimeError, SelectorFieldNotSupported, StyleError, StyleWarning, SubstanceError, SymmetricArgLengthMismatch, SymmetricTypeMismatch, TypeArgLengthMismatch, TypeMismatch, TypeNotFound, UnexpectedExprForNestedPred, VarNotFound } from "../types/errors";
import { State } from "../types/state";
import { BindingForm, ColorLit } from "../types/style";
import { Deconstructor, SubExpr } from "../types/substance";
declare const or: typeof import("true-myth/result").or, and: typeof import("true-myth/result").and, ok: typeof import("true-myth/result").ok, err: typeof import("true-myth/result").err, andThen: typeof import("true-myth/result").andThen, match: typeof import("true-myth/result").match, ap: typeof import("true-myth/result").ap, unsafelyUnwrap: typeof import("true-myth/result").unsafelyUnwrap, isErr: typeof import("true-myth/result").isErr, unsafelyGetErr: typeof import("true-myth/result").unsafelyUnwrapErr;
/**
 * Type pretty printing function.
 * @param t Type to be printed
 */
export declare const showType: (t: Type<A>) => string;
export declare const styWarnings: string[];
export declare const showError: (error: DomainError | SubstanceError | StyleError | StyleWarning | RuntimeError) => string;
export declare const cyclicSubtypes: (cycles: string[][]) => CyclicSubtypes;
export declare const duplicateName: (name: Identifier<A>, location: AbstractNode, firstDefined: AbstractNode) => DuplicateName;
export declare const typeNotFound: (typeName: Identifier<A>, possibleTypes?: Identifier<A>[]) => TypeNotFound;
export declare const varNotFound: (variable: Identifier<A>, possibleVars?: Identifier<A>[]) => VarNotFound;
export declare const symmetricTypeMismatch: (sourceExpr: AbstractNode) => SymmetricTypeMismatch;
export declare const symmetricArgLengthMismatch: (sourceExpr: AbstractNode) => SymmetricArgLengthMismatch;
export declare const typeMismatch: (sourceType: TypeConstructor<A>, expectedType: TypeConstructor<A>, sourceExpr: AbstractNode, expectedExpr: AbstractNode) => TypeMismatch;
export declare const unexpectedExprForNestedPred: (sourceType: TypeConstructor<A>, sourceExpr: AbstractNode, expectedExpr: AbstractNode) => UnexpectedExprForNestedPred;
export declare const argLengthMismatch: (name: Identifier<A>, argsGiven: SubExpr<A>[], argsExpected: Arg<A>[], sourceExpr: AbstractNode, expectedExpr: AbstractNode) => ArgLengthMismatch;
export declare const typeArgLengthMismatch: (sourceType: TypeConstructor<A>, expectedType: TypeConstructor<A>, sourceExpr: AbstractNode, expectedExpr: AbstractNode) => TypeArgLengthMismatch;
export declare const selectorFieldNotSupported: (name: BindingForm<A>, field: Identifier<A>) => SelectorFieldNotSupported;
export declare const deconstructNonconstructor: (deconstructor: Deconstructor<A>) => DeconstructNonconstructor;
export declare const fatalError: (message: string) => FatalError;
export declare const parseError: (message: string, location?: SourceLoc) => ParseError;
export declare const invalidColorLiteral: (color: ColorLit<C>) => InvalidColorLiteral;
export declare const nanError: (message: string, lastState: State) => NaNError;
export declare const toStyleErrors: (errors: StyleError[]) => PenroseError;
export declare const genericStyleError: (messages: StyleError[]) => PenroseError;
export declare const every: <Ok, Error_1>(...results: Result<Ok, Error_1>[]) => Result<Ok, Error_1>;
export declare const safeChain: <Item, Ok, Error_1>(itemList: Item[], func: (nextItem: Item, currentResult: Ok) => Result<Ok, Error_1>, initialResult: Result<Ok, Error_1>) => Result<Ok, Error_1>;
export declare const all: <Ok, Error_1>(results: Result<Ok, Error_1>[]) => Result<Ok[], Error_1[]>;
export { Result, and, or, ok, err, andThen, ap, match, unsafelyUnwrap, isErr, unsafelyGetErr, };
//# sourceMappingURL=Error.d.ts.map