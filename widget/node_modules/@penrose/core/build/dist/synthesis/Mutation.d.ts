import { ArgExpr } from "../analysis/SubstanceAnalysis";
import { A, Identifier } from "../types/ast";
import { ApplyConstructor, ApplyFunction, ApplyPredicate, Bind, Func, SubProg, SubStmt } from "../types/substance";
import { SynthesisContext, WithContext } from "./Synthesizer";
export type MutationGroup = Mutation[];
export type Mutation = Add | Delete | Update;
export type MutationType = Mutation["tag"];
export interface MutationBase {
    tag: MutationType;
    additionalMutations?: Mutation[];
    mutate: (op: this, prog: SubProg<A>, ctx: SynthesisContext) => WithContext<SubProg<A>>;
}
export type Update = SwapExprArgs | SwapStmtArgs | SwapInStmtArgs | SwapInExprArgs | ReplaceStmtName | ReplaceExprName | ChangeStmtType | ChangeExprType;
export interface Add extends MutationBase {
    tag: "Add";
    stmt: SubStmt<A>;
}
export interface Delete extends MutationBase {
    tag: "Delete";
    stmt: SubStmt<A>;
}
export interface SwapStmtArgs extends MutationBase {
    tag: "SwapStmtArgs";
    stmt: ApplyPredicate<A>;
    elem1: number;
    elem2: number;
}
export interface SwapExprArgs extends MutationBase {
    tag: "SwapExprArgs";
    stmt: Bind<A>;
    expr: ArgExpr<A>;
    elem1: number;
    elem2: number;
}
export interface SwapInStmtArgs extends MutationBase {
    tag: "SwapInStmtArgs";
    stmt: ApplyPredicate<A>;
    elem: number;
    swap: Identifier<A>;
}
export interface SwapInExprArgs extends MutationBase {
    tag: "SwapInExprArgs";
    stmt: Bind<A>;
    expr: ArgExpr<A>;
    elem: number;
    swap: Identifier<A>;
}
export interface ReplaceStmtName extends MutationBase {
    tag: "ReplaceStmtName";
    stmt: ApplyPredicate<A>;
    newName: string;
}
export interface ReplaceExprName extends MutationBase {
    tag: "ReplaceExprName";
    stmt: Bind<A>;
    expr: ArgExpr<A>;
    newName: string;
}
export interface ChangeStmtType extends MutationBase {
    tag: "ChangeStmtType";
    stmt: ApplyPredicate<A>;
    newStmt: SubStmt<A>;
    additionalMutations: Mutation[];
}
export interface ChangeExprType extends MutationBase {
    tag: "ChangeExprType";
    stmt: Bind<A>;
    expr: ArgExpr<A>;
    newStmt: SubStmt<A>;
    additionalMutations: Mutation[];
}
export declare const showMutations: (ops: Mutation[]) => string;
export declare const showMutation: (op: Mutation) => string;
export declare const executeMutation: (mutation: Mutation, prog: SubProg<A>, ctx: SynthesisContext) => WithContext<SubProg<A>>;
export declare const executeMutations: (mutations: Mutation[], prog: SubProg<A>, ctx: SynthesisContext) => WithContext<SubProg<A>>;
export declare const deleteMutation: (stmt: SubStmt<A>, newCtx?: SynthesisContext) => Delete;
export declare const addMutation: (stmt: SubStmt<A>, newCtx?: SynthesisContext) => Add;
export declare const appendStmtCtx: ({ stmt }: Add, p: SubProg<A>, ctx: SynthesisContext) => WithContext<SubProg<A>>;
export declare const removeStmtCtx: ({ stmt }: Delete, prog: SubProg<A>, ctx: SynthesisContext) => WithContext<SubProg<A>>;
export declare const checkAddStmts: (prog: SubProg<A>, cxt: SynthesisContext, newStmts: (cxt: SynthesisContext) => WithContext<SubStmt<A>[]>) => Add[] | undefined;
export declare const checkAddStmt: (prog: SubProg<A>, cxt: SynthesisContext, newStmt: (cxt: SynthesisContext) => WithContext<SubStmt<A>>) => Add | undefined;
export declare const checkSwapStmtArgs: (stmt: SubStmt<A>, elems: (p: ApplyPredicate<A>) => [number, number]) => SwapStmtArgs | undefined;
export declare const checkSwapExprArgs: (stmt: SubStmt<A>, elems: (p: ArgExpr<A>) => [number, number]) => SwapExprArgs | undefined;
export declare const checkSwapInStmtArgs: (stmt: SubStmt<A>, cxt: SynthesisContext, pickSwap: (options: Immutable.Map<string, Identifier<A>[]>) => Identifier<A> | undefined, element: (p: ApplyPredicate<A>) => number) => SwapInStmtArgs | undefined;
export declare const checkSwapInExprArgs: (stmt: SubStmt<A>, cxt: SynthesisContext, pickSwap: (options: Immutable.Map<string, Identifier<A>[]>) => Identifier<A> | undefined, element: (p: ApplyFunction<A> | ApplyConstructor<A> | Func<A>) => number) => SwapInExprArgs | undefined;
export declare const checkReplaceStmtName: (stmt: SubStmt<A>, newName: (p: ApplyPredicate<A>) => string | undefined) => ReplaceStmtName | undefined;
export declare const checkReplaceExprName: (stmt: SubStmt<A>, newName: (p: ArgExpr<A>) => string | undefined) => ReplaceExprName | undefined;
export declare const checkDeleteStmt: (prog: SubProg<A>, stmt: SubStmt<A>, newCtx?: SynthesisContext) => Delete | undefined;
export declare const checkChangeStmtType: (stmt: SubStmt<A>, cxt: SynthesisContext, getMutations: (s: ApplyPredicate<A>, cxt: SynthesisContext) => {
    newStmt: SubStmt<A>;
    additionalMutations: Mutation[];
} | undefined) => ChangeStmtType | undefined;
export declare const checkChangeExprType: (stmt: SubStmt<A>, cxt: SynthesisContext, getMutations: (oldStmt: Bind<A>, oldExpr: ArgExpr<A>, cxt: SynthesisContext) => {
    newStmt: SubStmt<A>;
    additionalMutations: Mutation[];
} | undefined) => ChangeExprType | undefined;
export declare const enumSwapStmtArgs: (stmt: SubStmt<A>) => SwapStmtArgs[];
export declare const enumSwapExprArgs: (stmt: SubStmt<A>) => SwapExprArgs[];
export declare const enumReplaceStmtName: (stmt: SubStmt<A>, prog: SubProg<A>, cxt: SynthesisContext) => ReplaceStmtName[];
export declare const enumReplaceExprName: (stmt: SubStmt<A>, prog: SubProg<A>, cxt: SynthesisContext) => ReplaceExprName[];
export declare const enumChangeStmtType: (stmt: SubStmt<A>, prog: SubProg<A>, cxt: SynthesisContext) => ChangeStmtType[];
export declare const enumChangeExprType: (stmt: SubStmt<A>, prog: SubProg<A>, cxt: SynthesisContext) => ChangeExprType[];
type MutationEnumerator = (stmt: SubStmt<A>, prog: SubProg<A>, cxt: SynthesisContext) => Mutation[];
export declare const mutationEnumerators: MutationEnumerator[];
export declare const enumerateStmtMutations: (stmt: SubStmt<A>, prog: SubProg<A>, cxt: SynthesisContext) => Mutation[];
export declare const enumerateProgMutations: (prog: SubProg<A>, cxt: SynthesisContext) => Mutation[];
export {};
//# sourceMappingURL=Mutation.d.ts.map