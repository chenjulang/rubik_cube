import moo from "moo";
import { C, Identifier, NodeType, SourceLoc, SourceRange } from "../types/ast";
export declare const basicSymbols: moo.Rules;
export declare const rangeOf: (token: moo.Token | SourceRange) => SourceRange;
/** Given a list of nodes, find the range of nodes */
export declare const rangeFrom: (children: SourceRange[]) => SourceRange;
export declare const rangeBetween: (beginToken: moo.Token | SourceRange, endToken: moo.Token | SourceRange | undefined) => SourceRange;
export declare const convertTokenId: ([token]: moo.Token[]) => Partial<Identifier<C>>;
export declare const nth: <T>(n: number) => (d: T[]) => T;
export declare const optional: <T>(optionalValue: T | undefined, defaultValue: T) => T;
export declare const tokensIn: (tokenList: (moo.Token | moo.Token[] | undefined)[]) => moo.Token[];
export declare const idOf: (value: string, nodeType: NodeType) => Identifier<C>;
export declare const lastLocation: (parser: nearley.Parser) => SourceLoc | undefined;
export declare const prettyParseError: (e: unknown) => string;
//# sourceMappingURL=ParserUtil.d.ts.map