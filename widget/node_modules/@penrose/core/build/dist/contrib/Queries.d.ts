import * as BBox from "../engine/BBox";
import * as ad from "../types/ad";
/**
 * Return bounding box from any provided shape.
 */
export declare const bboxFromShape: ([t, s]: [string, any]) => BBox.BBox;
/**
 * Return center of the shape `shape`.
 * For shapes without the property `center`, the center of their bounding box is returned.
 */
export declare const shapeCenter: ([t, s]: [string, any]) => ad.Pt2;
/**
 * Return size of the shape `shape`.
 * - `radius` for circles.
 * - `sqrt( w * h )`, where `w` and `h` are the width and height of the bounding box, for all other shapes.
 */
export declare const shapeSize: ([t, s]: [string, any]) => ad.Num;
/**
 * Return vertices of polygon-like shapes.
 */
export declare const polygonLikePoints: ([t, s]: [string, any]) => ad.Pt2[];
/**
 * Return outward unit normal vector to `lineSegment` with respect to `insidePoint`.
 * @param lineSegment Two points defining the line segment.
 * @param insidePoint Any point inside of the half-plane.
 */
export declare const outwardUnitNormal: (lineSegment: ad.Num[][], insidePoint: ad.Num[]) => ad.Num[];
//# sourceMappingURL=Queries.d.ts.map