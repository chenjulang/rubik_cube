import { Circle } from "../shapes/Circle";
import { Ellipse } from "../shapes/Ellipse";
import * as ad from "../types/ad";
/**
 * Parameters of implicitly defined ellipse:
 * `a * (X - x)^2 + b * (Y - y)^2 = c`
 */
export interface ImplicitEllipse {
    a: ad.Num;
    b: ad.Num;
    c: ad.Num;
    x: ad.Num;
    y: ad.Num;
}
/**
 * Parameters of implicitly defined half-plane:
 * `a * X + b * Y <= c`
 */
export interface ImplicitHalfPlane {
    a: ad.Num;
    b: ad.Num;
    c: ad.Num;
}
/**
 * Evaluate the implicit function for an ellipse at point with coordinates `x` and `y`.
 * @param ei Implicit ellipse parameters.
 * @param x X-coordinate.
 * @param y Y-coordinate.
 */
export declare const implicitEllipseFunc: (ei: ImplicitEllipse, x: ad.Num, y: ad.Num) => ad.Num;
/**
 * Evaluate the implicit function for an intersection of 2 ellipses at point with coordinates `x` and `y`.
 * @param ei1 First implicit ellipse parameters.
 * @param ei2 Second implicit ellipse parameters.
 * @param x X-coordinate.
 * @param y Y-coordinate.
 */
export declare const implicitIntersectionOfEllipsesFunc: (ei1: ImplicitEllipse, ei2: ImplicitEllipse, x: ad.Num, y: ad.Num) => ad.Num;
/**
 * Evaluate the implicit function for an half-plane at point with coordinates `x` and `y`.
 * @param hpi Implicit half-plane parameters.
 * @param x X-coordinate.
 * @param y Y-coordinate.
 */
export declare const implicitHalfPlaneFunc: (hpi: ImplicitHalfPlane, x: ad.Num, y: ad.Num) => ad.Num;
/**
 * Return implicit half-plane parameters given a line and a point inside the half-plane.
 * @param lineSegment Two points defining the line segment.
 * @param insidePoint Any point inside of the half-plane.
 * @param padding Padding around the Half-plane.
 */
export declare const halfPlaneToImplicit: (lineSegment: ad.Num[][], insidePoint: ad.Num[], padding: ad.Num) => ImplicitHalfPlane;
/**
 * Return implicit ellipse parameters from an explicit representation.
 * @param ellipse Explicit ellipse shape.
 * @param padding Padding added to the ellipse.
 * Note: this is an approximation of Minkowski sum of ellipse and circle.
 * But the difference should be negligable for small `padding` and/or eccentricity.
 * @param factor Multiplication factor for the implicit function (the function is not uniquely given).
 */
export declare const ellipseToImplicit: (ellipse: Ellipse, padding: ad.Num, factor?: ad.Num) => ImplicitEllipse;
/**
 * Return implicit ellipse parameters from an explicit circle.
 * @param circle Explicit circle shape.
 */
export declare const circleToImplicitEllipse: (circle: Circle, padding: ad.Num, factor?: ad.Num) => ImplicitEllipse;
export declare const ellipsePolynomial: (a: ImplicitEllipse, b: ImplicitEllipse) => ad.Num[];
//# sourceMappingURL=ImplicitShapes.d.ts.map