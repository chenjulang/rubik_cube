import { Circle } from "../shapes/Circle";
import { Ellipse } from "../shapes/Ellipse";
import { Equation } from "../shapes/Equation";
import { Image } from "../shapes/Image";
import { Line } from "../shapes/Line";
import { Polygon } from "../shapes/Polygon";
import { Rectangle } from "../shapes/Rectangle";
import { Text } from "../shapes/Text";
import * as ad from "../types/ad";
/**
 * Require that circle `s1` overlaps circle `s2` with some overlap `overlap`.
 */
export declare const overlappingCircles: ([t1, s1]: [string, Circle], [t2, s2]: [string, Circle], overlap?: ad.Num) => ad.Num;
/**
 * Require that polygon `s1` overlaps polygon `s2` with some overlap `overlap`.
 */
export declare const overlappingPolygons: ([t1, s1]: [string, Polygon | Rectangle | Text | Equation | Image | Line], [t2, s2]: [string, Polygon | Rectangle | Text | Equation | Image | Line], overlap?: ad.Num) => ad.Num;
/**
 * Require that bounding box of `s1` overlaps bounding box of `s2` with some overlap `overlap`.
 */
export declare const overlappingAABBs: ([t1, s1]: [string, any], [t2, s2]: [string, any], overlap?: ad.Num) => ad.Num;
/**
 * Require that ellipse `s1` overlaps ellipse `s2` with some overlap `overlap`.
 */
export declare const overlappingEllipse: ([, s1]: [string, Ellipse], [, s2]: [string, Ellipse], overlap: ad.Num) => ad.Num;
/**
 * Require that rectangle `s1` overlaps circle `s2` with some overlap `overlap`.
 */
export declare const overlappingRectlikeCircle: ([t1, s1]: [string, Rectangle | Text | Equation | Image], [t2, s2]: [string, Circle], overlap?: ad.Num) => ad.Num;
/**
 * Require that polygon `s1` overlaps ellipse `s2` with some overlap `overlap`.
 */
export declare const overlappingPolygonEllipse: ([t1, s1]: [string, Polygon | Rectangle | Text | Equation | Image | Line], [, s2]: [string, Ellipse], overlap?: ad.Num) => ad.Num;
/**
 * Require that circle `s1` overlaps ellipse `s2` with some overlap `overlap`.
 */
export declare const overlappingCircleEllipse: ([, s1]: [string, Circle], [, s2]: [string, Ellipse], overlap?: ad.Num) => ad.Num;
/**
 * Require that circle `s1` overlaps line `s2` with some overlap `overlap`.
 */
export declare const overlappingCircleLine: ([, s1]: [string, Circle], [, s2]: [string, Line], overlap?: ad.Num) => ad.Num;
/**
 * Require that circle `s1` overlaps line `s2` with some overlap `overlap`.
 */
export declare const overlappingTextLine: (t: [string, Text | Equation], [, s2]: [string, Line], overlap?: ad.Num) => ad.Num;
/**
 * Require that shape `s1` is at a distance of `distance` from shape `s2`.
 */
export declare const atDistLabel: ([t1, s1]: [string, any], [t2, s2]: [string, any], distance: ad.Num) => ad.Num;
/**
 * Require that a shape `s1` contains another shape `s2`.
 */
export declare const containsCircles: ([t1, s1]: [string, Circle], [t2, s2]: [string, Circle], padding?: ad.Num) => ad.Num;
/**
 * Require that a shape `s1` contains another shape `s2`.
 */
export declare const containsCircleRectlike: ([t1, s1]: [string, Circle], [t2, s2]: [string, Rectangle | Text | Equation | Image], padding?: ad.Num) => ad.Num;
/**
 * Require that a shape `s1` contains another shape `s2`.
 */
export declare const containsRectlikeCircle: ([, s1]: [string, Rectangle | Text | Equation | Image], [, s2]: [string, Circle], padding?: ad.Num) => ad.Num;
/**
 * Require that a shape `s1` contains another shape `s2`.
 */
export declare const containsAABBs: ([t1, s1]: [string, any], [t2, s2]: [string, any], padding?: ad.Num) => ad.Num;
/**
 * Require that a polygon `s1` contains another polygon `s2`.
 */
export declare const containsPolygonPolygon: ([, s1]: [string, Polygon], [, s2]: [string, Polygon], padding?: ad.Num) => ad.Num;
/**
 * Require that a polygon `s1` contains circle `s2`.
 */
export declare const containsPolygonCircle: ([, s1]: [string, Polygon], [, s2]: [string, Circle], padding?: ad.Num) => ad.Num;
/**
 * Require that a circle `s1` contains polygon `s2`.
 */
export declare const containsCirclePolygon: ([, s1]: [string, Circle], [, s2]: [string, Polygon], padding?: ad.Num) => ad.Num;
//# sourceMappingURL=ConstraintsUtils.d.ts.map