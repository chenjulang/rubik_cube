import { A, C } from "../types/ast";
import { DomainProg, Env, Type, TypeConstructor } from "../types/domain";
import { DomainError, ParseError, PenroseError, TypeNotFound, TypeVarNotFound } from "../types/errors";
import { TypeConsApp } from "../types/substance";
import { Result } from "../utils/Error";
export declare const parseDomain: (prog: string) => Result<DomainProg<C>, ParseError>;
/**
 * Top-level function for the Domain parser and checker. Given Domain program string, it outputs either a `PenroseError` or an `Env` context.
 *
 * @param prog Domain program string
 */
export declare const compileDomain: (prog: string) => Result<Env, PenroseError>;
export type CheckerResult = Result<Env, DomainError>;
/**
 * Top-level function for the Domain semantic checker. Given a Domain AST, it outputs either a `DomainError` or a `DomainEnv` context.
 * @param prog compiled AST of a Domain program
 */
export declare const checkDomain: (prog: DomainProg<C>) => CheckerResult;
/**
 * Check if a type exists in the domain context. Used across Domain, Substance, and Style. If the type is a type variable, the function assumes the `env` already has `typeVars` populated for lookup.
 * @param type type constructor, type variable, or prop to be checked.
 * @param env  the Domain environment
 */
export declare const checkType: (type: Type<A>, env: Env) => Result<Env, TypeNotFound | TypeVarNotFound>;
/**
 * Check if a type constructor exists in the domain context. Used across Domain, Substance, and Style.
 * @param type type constructor to be checked.
 * @param env  the Domain environment
 */
export declare const checkTypeConstructor: (type: TypeConstructor<A>, env: Env) => Result<Env, TypeNotFound | TypeVarNotFound>;
/**
 * Utility for comparing types. `isSubtypeOf` returns true if `subType` is a subtype of `superType`, or if both are actually the same type.
 * TODO: this function only compares nullary type constructors
 * @param subType
 * @param superType
 * @param env
 */
export declare const isDeclaredSubtype: (subType: TypeConstructor<A>, superType: TypeConstructor<A>, env: Env) => boolean;
export declare const superTypesOf: (subType: TypeConstructor<A>, env: Env) => Set<string>;
export declare const subTypesOf: (superType: TypeConstructor<A>, env: Env) => string[];
export declare const isSubtype: (subType: Type<A>, superType: Type<A>, env: Env) => boolean;
export declare const topType: TypeConsApp<A>;
export declare const bottomType: TypeConsApp<A>;
/**
 * Type pretty printing function.
 * @param t Type to be printed
 */
export declare const showType: (t: Type<C>) => string;
//# sourceMappingURL=Domain.d.ts.map