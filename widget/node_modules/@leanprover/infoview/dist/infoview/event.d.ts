import type { Disposable } from 'vscode-languageserver-protocol';
/**
 * When `fire(...args)` is invoked on an `EventEmitter`, the provided `args` are propagated
 * to all registered handlers. Handlers can be registered using `on`. */
export declare class EventEmitter<E> {
    private handlers;
    current?: E;
    on(handler: (_: E) => void): Disposable;
    fire(event: E): void;
    dispose(): void;
}
type ExcludeNonEvent<T, U> = T extends (...args: any) => Promise<void> ? U : never;
/**
 * Turn all fields in `T` which extend `(...args: As) => Promise<void>` into event emitter fields
 * `f: EventEmitter<As>`. Other fields are removed. */
export type Eventify<T> = {
    [P in keyof T as ExcludeNonEvent<T[P], P>]: T[P] extends (arg: infer A) => Promise<void> ? EventEmitter<A> : T[P] extends (...args: infer As) => Promise<void> ? EventEmitter<As> : never;
};
export {};
